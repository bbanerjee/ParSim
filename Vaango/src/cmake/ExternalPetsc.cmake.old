# In your main CMakeLists.txt or a dedicated file like cmake/ExternalPETSc.cmake

include(ExternalProject)

# Define installation directories
set(PETSC_INSTALL_DIR "${CMAKE_BINARY_DIR}/petsc_install")

# Configure PETSc options
set(PETSC_CONFIG_OPTIONS
    --prefix=${PETSC_INSTALL_DIR}
    --with-debugging=$<$<CONFIG:Debug>:1>$<$<NOT:$<CONFIG:Debug>>:0>

    # *** IMPORTANT CHANGE FOR SYSTEM OPENMPI ***
    # Use MPI compiler wrappers for PETSc's compilers.
    # Ensure these wrappers (mpicc, mpicxx, mpifort) are in your PATH
    # when CMake is run, or provide their full paths.
    --with-cc=mpicc
    --with-cxx=mpicxx
    --with-fc=mpifort # Only if you need Fortran support in PETSc

    # Remove --download-openmpi=1 as we're using a system install
    # --download-openmpi=1

    # Keep other download options as needed (BLAS/LAPACK, HDF5, etc.)
    --download-openblas
    --download-hypre
    #--with-blaslapack-essl=0 --download-fblaslapack=1 # Example: download BLAS/LAPACK
    # Add other --download-xxx options as needed (e.g., --download-hdf5, --download-metis)
    # You might also use --with-XXX-dir=/path/to/system/XXX if you have system versions
    # of these dependencies and don't want PETSc to download them.

    # Example for arch specific builds
    # --PETSC_ARCH=${CMAKE_SYSTEM_NAME}-$<IF:$<CONFIG:Debug>,debug,opt>
)

# ExternalProject_Add to configure, build, and install PETSc
ExternalProject_Add(
    petsc_external
    GIT_REPOSITORY "${CMAKE_CURRENT_SOURCE_DIR}/submodules/petsc"
    GIT_TAG "v3.20.0" # Or a specific release tag, e.g., "v3.20.0" (recommended for stability)
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/submodules/petsc"
    BINARY_DIR "${CMAKE_BINARY_DIR}/petsc-build" # Build directory for PETSc
    INSTALL_DIR "${PETSC_INSTALL_DIR}"
    LOG_CONFIGURE ON
    LOG_BUILD ON
    LOG_INSTALL ON

    # Custom commands for configure, build, and install
    CONFIGURE_COMMAND
        <SOURCE_DIR>/configure
        ${PETSC_CONFIG_OPTIONS}

    BUILD_COMMAND
        ${CMAKE_COMMAND} --build <BINARY_DIR>
    BUILD_JOB_SERVER_AWARE TRUE # For CMake 3.28

    INSTALL_COMMAND
        ${CMAKE_COMMAND} --install <BINARY_DIR> --prefix ${PETSC_INSTALL_DIR}

    # Prevent PETSc from configuring itself with its own CMake setup if it detects one.
    CMAKE_ARGS -DPETSC_IGNORE_CMAKE_COMPATIBILITY_CHECK=TRUE
)

# Set variables that your main project can use to find PETSc
ExternalProject_Get_Property(petsc_external INSTALL_DIR)

set(PETSC_DIR "${INSTALL_DIR}")
set(PETSC_INCLUDE_DIRS "${INSTALL_DIR}/include")
set(PETSC_LIB_DIRS "${INSTALL_DIR}/lib")

# Ensure your project depends on the PETSc external project
add_custom_target(my_petsc_lib_target DEPENDS petsc_external)

# Example of how to use PETSc in your target:
# add_executable(my_app main.cpp)
# target_include_directories(my_app PRIVATE ${PETSC_INCLUDE_DIRS})
# target_link_libraries(my_app PRIVATE ${PETSC_LIB_DIRS} petsc_snes petsc_dm petsc_vec # ... other PETSc libraries)
# add_dependencies(my_app my_petsc_lib_target)
