#
# The MIT License
#
# Copyright (c) 2013-2014 Callaghan Innovation, New Zealand
# Copyright (c) 2014-2025 Biswajit Banerjee, Parresia Research Limited, NZ
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

# This is the root Vaango CMakeLists file.

# Flags for cmake:
#  -DCMAKE_BUILD_TYPE=Debug -- for the debug build
#  -DVISIT_DIR=aa/bb/cc -- to build Visit
#  -DBUILD_UNIT_TESTS=1   -- to build unit tests
#  -DUSE_CLANG=1  -- use clang compilers

#----------------------------------------------------------------------------
# Create the project and check cmake version
#----------------------------------------------------------------------------
MESSAGE(STATUS "This is CMake ${CMAKE_VERSION}")
MESSAGE(STATUS "")

cmake_minimum_required(VERSION 3.28 FATAL_ERROR)

#----------------------------------------------------------------------------
# Prevent in-source builds 
#----------------------------------------------------------------------------
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
    message(FATAL_ERROR 
        "Vaango cannot be configured in-source. "
        "Please create a separate build directory!")
endif()

#----------------------------------------------------------------------------
# Set the project with languages
#----------------------------------------------------------------------------
project(Vaango 
    VERSION 1.1.0
    LANGUAGES C CXX Fortran
    DESCRIPTION "Vaango project"
)

# Optional: Create legacy variables for compatibility
set(MAJOR_VERSION ${PROJECT_VERSION_MAJOR})
set(MINOR_VERSION ${PROJECT_VERSION_MINOR})
set(PATCH_VERSION ${PROJECT_VERSION_PATCH})

# Optional: Enable verbose makefile (uncomment if needed)
# set(CMAKE_VERBOSE_MAKEFILE ON)

# Create interface library for common compile options
add_library(vaango_options INTERFACE)
add_library(vaango_warnings INTERFACE)

# Create aliases for cleaner usage
add_library(Vaango::Options ALIAS vaango_options)
add_library(Vaango::Warnings ALIAS vaango_warnings)

# Backward compatibility
include (CMakeBackwardCompatibilityC)

#----------------------------------------------------------------------------
# Default to release builds
#----------------------------------------------------------------------------
if( NOT CMAKE_BUILD_TYPE )
  set( CMAKE_BUILD_TYPE "Release" CACHE STRING
    "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
    FORCE )
endif( NOT CMAKE_BUILD_TYPE )

#----------------------------------------------------------------------------
# C/C++ compiler configuration
#----------------------------------------------------------------------------
# Set C++ standard requirements
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable compile commands export
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Compiler selection (if needed)
if(USE_CLANG)
    find_program(CLANG_C_COMPILER clang REQUIRED)
    find_program(CLANG_CXX_COMPILER clang++ REQUIRED)
    find_program(GFORTRAN_COMPILER gfortran REQUIRED)
    
    set(CMAKE_C_COMPILER ${CLANG_C_COMPILER})
    set(CMAKE_CXX_COMPILER ${CLANG_CXX_COMPILER})
    set(CMAKE_Fortran_COMPILER ${GFORTRAN_COMPILER})
endif()

#----------------------------------------------------------------------------
# Load macros and update the module path
#----------------------------------------------------------------------------
include(${Vaango_SOURCE_DIR}/cmake/Macros/fortranDependency.cmake)

#----------------------------------------------------------------------------
# Compile options
#----------------------------------------------------------------------------
# Compiler-specific options
if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_options(vaango_options INTERFACE
        $<$<CONFIG:Debug>:-g -O0>
        $<$<CONFIG:Release>:-O3 -DNDEBUG>
    )
    target_compile_options(vaango_warnings INTERFACE
        -Wall
        -Wextra
        -Wpedantic
    )
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(vaango_options INTERFACE
        -rdynamic
        $<$<CONFIG:Debug>:-g -O0>
        $<$<CONFIG:Release>:-O3 -DNDEBUG>
    )
    target_compile_options(vaango_warnings INTERFACE
        -Wall
        -Wextra
        -Wpedantic
        # Uncomment these for stricter checking:
        # -Wsuggest-override
        # -Wconversion
        # -Wsign-conversion
    )
    target_link_options(vaango_options INTERFACE
        -rdynamic
    )
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
    target_compile_options(vaango_options INTERFACE
        $<$<CONFIG:Debug>:-g -O0>
        $<$<CONFIG:Release>:-O3 -DNDEBUG>
    )
    # Intel compiler specific options can be added here
endif()

#----------------------------------------------------------------------------
# Architecture-specific options
#----------------------------------------------------------------------------
if(NOT DEFINED NBITS)
    # Auto-detect architecture if not specified
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(NBITS 64)
    else()
        set(NBITS 32)
    endif()
endif()

if(NBITS EQUAL 64)
    message(STATUS "Building for 64-bit architecture")
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_compile_options(vaango_options INTERFACE
            -m64
            -msse2
        )
    endif()
else()
    message(STATUS "Building for 32-bit architecture")
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_compile_options(vaango_options INTERFACE
            -m32
            -msse2
        )
    endif()
endif()

#----------------------------------------------------------------------------
# Platform-specific configuration
#----------------------------------------------------------------------------
if(WIN32)
    target_compile_definitions(vaango_options INTERFACE
        _USE_MATH_DEFINES          # Defines M_PI for Windows
        _WIN32_WINNT=0x0500       # Windows 2000 features
        _CRT_SECURE_NO_DEPRECATE  # Turn off VS warnings about strcpy etc.
        WIN32_LEAN_AND_MEAN       # Prevent rad1/grp1 definitions
        NOMINMAX                  # Prevent min/max macro definitions
    )
    
    if(NOT BUILD_SHARED_LIBS)
        target_compile_definitions(vaango_options INTERFACE
            BUILD_CORE_STATIC
            GLEW_STATIC
        )
    endif()
    
    # Set warning level for MSVC
    if(MSVC)
        target_compile_options(vaango_warnings INTERFACE
            /W1  # Warning level 1 (instead of default W3/W4)
        )
        # Remove any existing /W flags and replace with /W1
        string(REGEX REPLACE "/W[0-4]" "/W1" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    endif()
endif()

#----------------------------------------------------------------------------
# Platform detection and system information
#----------------------------------------------------------------------------
include(ProcessorCount)
include(CheckTypeSize)

# Detect number of processors
ProcessorCount(NUM_CPUS)
if(NUM_CPUS EQUAL 0)
    set(NUM_CPUS 1)
endif()

# Platform-specific settings with modern CMake approach
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")  # macOS
    set(IS_OSX TRUE)
    target_compile_definitions(vaango_options INTERFACE IS_OSX=1)
    message(STATUS "Platform: macOS")
    
elseif(CMAKE_SYSTEM_NAME STREQUAL "AIX")
    set(IS_AIX TRUE)
    target_compile_definitions(vaango_options INTERFACE IS_AIX=1)
    message(STATUS "Platform: AIX")
    
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(IS_LINUX TRUE)
    target_compile_definitions(vaango_options INTERFACE IS_LINUX=1)
    message(STATUS "Platform: Linux")
    
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    if(MINGW)
        set(IS_WIN TRUE)
        target_compile_definitions(vaango_options INTERFACE IS_WIN=1)
        message(STATUS "Platform: Windows (MinGW)")
    else()
        message(FATAL_ERROR "Currently Windows only configures with MinGW. See install instructions")
    endif()
    
else()
    message(WARNING "Untested system: ${CMAKE_SYSTEM_NAME} - You are on your own!")
endif()

message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Compiler ID: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "Architecture: ${NBITS}-bit")
message(STATUS "CPU Count: ${NUM_CPUS}")
if(CMAKE_BUILD_TYPE)
    message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
endif()

#----------------------------------------------------------------------------
# Type size checks and endianness detection
#----------------------------------------------------------------------------
check_type_size("long long" SIZEOF_LONG_LONG)
message(STATUS "sizeof(long long): ${SIZEOF_LONG_LONG}")

# Long long size validation and swap determination
if(SIZEOF_LONG_LONG EQUAL 8)
    set(LONG_LONG_SWAP "SWAP_8")
elseif(SIZEOF_LONG_LONG EQUAL 4)
    set(LONG_LONG_SWAP "SWAP_4")
else()
    message(FATAL_ERROR 
        "Unexpected sizeof(long long): ${SIZEOF_LONG_LONG}\n"
        "This usually indicates an incorrect LD_LIBRARY_PATH for your compiler.\n"
        "To debug: check the compile command and C++ program from config.log,\n"
        "compile and run it manually to see the actual error.\n"
        "Fix your LD_LIBRARY_PATH or compiler setup.")
endif()

# Endianness detection (modern CMake way)
include(TestBigEndian)
test_big_endian(IS_BIG_ENDIAN)
if(IS_BIG_ENDIAN)
    target_compile_definitions(vaango_options INTERFACE IS_BIG_ENDIAN=1)
    message(STATUS "Endianness: Big Endian")
else()
    target_compile_definitions(vaango_options INTERFACE IS_LITTLE_ENDIAN=1)
    message(STATUS "Endianness: Little Endian")
endif()

#----------------------------------------------------------------------------
# Configure generated header files
#----------------------------------------------------------------------------
# Generate Endian.h
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/Util/testEndian.h.in 
    ${CMAKE_CURRENT_BINARY_DIR}/Core/Util/Endian.h
    @ONLY
)

# Generate mem_init.h
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/Malloc/testmem_init.h.in 
    ${CMAKE_CURRENT_BINARY_DIR}/Core/Malloc/mem_init.h
    @ONLY
)

# Add binary directory to include path for generated headers
target_include_directories(vaango_options INTERFACE
    ${CMAKE_CURRENT_BINARY_DIR}
)

#----------------------------------------------------------------------------------
# Configure options
#----------------------------------------------------------------------------------
option(MPM               "Build MPM and MPMICE" ON)
option(ICE               "Build ICE and MPMICE" ON)
option(FORTRAN           "Build with fortran" ON)
option(PETSC             "Build with PETSc" OFF)
option(HYPRE             "Build with HYPRE" OFF)
option(BUILD_SHARED_LIBS "Build shared libraries" ON)
mark_as_advanced(BUILD_SHARED_LIBS)
if (DEFINED VISIT_DIR)
  set(VISIT ON)
endif ()

#message(STATUS "After Option: Compiling FORTRAN code? ${FORTRAN}")

#----------------------------------------------------------------------------
# Cache the source and  library paths
#----------------------------------------------------------------------------
set(BUILD_FROM_TOP_LEVEL 0)
set(PACKAGE_SRC_PATH ${Vaango_SOURCE_DIR} CACHE INTERNAL "Path to Vaango source tree.")
set(PACKAGE_LIB_PATH ${Vaango_BINARY_DIR}/lib CACHE INTERNAL "Path to Vaango Libraries.")
set(scirun_src_dir ${Vaango_SOURCE_DIR})
set(scirun_obj_dir ${Vaango_BINARY_DIR})

#----------------------------------------------------------------------------
# Output directories.
#----------------------------------------------------------------------------
set (LIBRARY_OUTPUT_PATH ${Vaango_BINARY_DIR}/lib CACHE INTERNAL "Single output directory for building all libraries.")
set (EXECUTABLE_OUTPUT_PATH ${Vaango_BINARY_DIR} CACHE INTERNAL "Single output directory for building all executables.")
mark_as_advanced(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)

#----------------------------------------------------------------------------
# Optional variable intialization  
#----------------------------------------------------------------------------
set(HAVE_HDF5 "no")
set(HAVE_TABPROPS "no")
set(HAVE_SPATIALOPS "no")
set(HAVE_EXPRLIB "no")

#----------------------------------------------------------------------------------
# Turn off ICE or MPM (for sci_defs/uintah_defs.h)
#----------------------------------------------------------------------------------
set(DEF_MPM "")
set(DEF_ICE "")
set(DEF_NO_FORTRAN "")

if (MPM)
  set(BUILD_MPM "yes")
  set(USE_MPM   "yes")
else ()
  set(DEF_MPM "#define NO_MPM")
  set(BUILD_MPM "no")
  set(USE_MPM   "no")
endif()

if (ICE)
  set(BUILD_ICE "yes")
  set(USE_ICE   "yes")
else()
  set(DEF_ICE "#define NO_ICE")
  set(BUILD_ICE "no")
  set(USE_ICE   "no")
endif()

# NO_FORTRAN is used in configVars.mk[.in] and DEF_NO_FORTRAN is used in uintah_testdefs.h.in
if (FORTRAN)
  set(NO_FORTRAN "no")
else ()
  set(NO_FORTRAN "yes")
  set(DEF_NO_FORTRAN "#define NO_FORTRAN")
endif ()

#message(STATUS "After NO_FORTRAN: Compiling FORTRAN code? ${FORTRAN}")

#--------------------------------------------------------------------------------
# Name mangling etc. for fortran files
# Most fortran compilers need an "_" for C function names.
# Some have strange underscore needs.  This flag is used in the
# tools/fspec.pl.in file to generate the correct
# cname of the fortran function.
#--------------------------------------------------------------------------------
enable_language(Fortran)

string(REGEX MATCH ftn HAVE_CRAYFTN ${CMAKE_Fortran_COMPILER})
string(REGEX MATCH gfortran HAVE_GFORTRAN ${CMAKE_Fortran_COMPILER})
string(REGEX MATCH f90 HAVE_GFORTRAN ${CMAKE_Fortran_COMPILER})
#string(REGEX MATCH f95 HAVE_GFORTRAN ${CMAKE_Fortran_COMPILER})
string(REGEX MATCH xlf HAVE_XLF ${CMAKE_Fortran_COMPILER})
string(REGEX MATCH pg77 HAVE_PG77 ${CMAKE_Fortran_COMPILER})
string(REGEX MATCH g77 HAVE_G77 ${CMAKE_Fortran_COMPILER})
string(REGEX MATCH ifort HAVE_ifort ${CMAKE_Fortran_COMPILER})
string(REGEX MATCH f77 HAVE_F77 ${CMAKE_Fortran_COMPILER})

# In case regex match fails
if(CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
  set(HAVE_GFORTRAN 1)
endif()
if(CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
  set(HAVE_ifort 1)
endif()
if(CMAKE_Fortran_COMPILER_ID MATCHES "PGI")
  set(HAVE_PG77 1)
endif()

message(STATUS "Fortran compiler ${CMAKE_Fortran_COMPILER}")
message(STATUS "Fortran compiler ID ${CMAKE_Fortran_COMPILER_ID}")
message(STATUS "HAVE_GFORTRAN ${HAVE_GFORTRAN}")

# DON'T USE find_library - many machine's paths are compiler specific.  The *right* thing would be
#   to compile a program looking for the fortran lib, but this is probably good enough
if(HAVE_CRAYFTN)
  #find_library(F_LIBRARY NAMES ftn)
  set(F_LIBRARY "" CACHE STRING "fortran library")
  set(FORTRAN_UNDERSCORE end CACHE STRING "What type of fortran underscore style - linux,end,none")
  set(DEF_FORTRAN_UNDERSCORE "#define FORTRAN_UNDERSCORE_END")
  message(STATUS "Have CRAY ftn. Setting libraries to ${F_LIBRARY}")
elseif(HAVE_GFORTRAN)
  set(F_LIBRARY gfortran CACHE STRING "fortran library")
  find_library(F_LIBRARY NAMES gfortran)
  set(FORTRAN_UNDERSCORE end CACHE STRING "What type of fortran underscore style - linux,end,none")
  set(DEF_FORTRAN_UNDERSCORE "#define FORTRAN_UNDERSCORE_END")
  message(STATUS "Have gfortran. Setting libraries. ${F_LIBRARY}")
elseif(HAVE_XLF)
  set(F_LIBRARY xlf90 CACHE STRING "fortran library")
  find_library(F_LIBRARY NAMES xlf90)
  set(FORTRAN_UNDERSCORE none CACHE STRING "What type of fortran underscore style - linux,end,none")
  set(DEF_FORTRAN_UNDERSCORE "#define FORTRAN_UNDERSCORE_NONE")
elseif(HAVE_PGF77)
  set(F_LIBRARY pgftnrtl CACHE STRING "fortran library")
  find_library(F_LIBRARY NAMES pgftnrtl)
  set(FORTRAN_UNDERSCORE end CACHE STRING "What type of fortran underscore style - linux,end,none")
  set(DEF_FORTRAN_UNDERSCORE "#define FORTRAN_UNDERSCORE_END")
elseif(HAVE_G77)
  set(F_LIBRARY g2c CACHE STRING "fortran library")
  find_library(F_LIBRARY NAMES g2c)
  set(FORTRAN_UNDERSCORE linux CACHE STRING "What type of fortran underscore style - linux,end,none")
  set(DEF_FORTRAN_UNDERSCORE "#define FORTRAN_UNDERSCORE_LINUX")
elseif(HAVE_ifort)
  set(F_LIBRARY ifcore CACHE STRING "fortran library")
  find_library(F_LIBRARY NAMES ifcore)
  set(FORTRAN_UNDERSCORE end CACHE STRING "What type of fortran underscore style - linux,end,none")
  set(DEF_FORTRAN_UNDERSCORE "#define FORTRAN_UNDERSCORE_END")
  message(STATUS "Have ifort. Setting libraries. ${F_LIBRARY}")
elseif(HAVE_F77)
  # sgi needs ftn fortran
  #if(CMAKE_SYSTEM MATCHES "IRIX.*")
  #set(FORTRAN_UNDERSCORE end CACHE STRING "What type of fortran underscore style - linux,end,none")
  # dec needs for Ufor
  #if(CMAKE_SYSTEM MATCHES "OSF.*")
  # find_library(F_LIBRARY NAMES ........)
  #set(FORTRAN_UNDERSCORE end CACHE STRING "What type of fortran underscore style - linux,end,none")
  set(FORTRAN_UNDERSCORE end CACHE STRING "What type of fortran underscore style - linux,end,none")
  set(FORTRAN_LIBRARY "" CACHE STRING "fortran library")
  set(DEF_FORTRAN_UNDERSCORE "#define FORTRAN_UNDERSCORE_END")
else()
  message(FATAL_ERROR "Cannot find fortran library")
endif()


#--------------------------------------------------
# Set the local module path
#--------------------------------------------------
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/Modules/" ${CMAKE_MODULE_PATH})

#----------------------------------------------------------------------------------
# Find the Perl package to use
#----------------------------------------------------------------------------------
find_program(PERL perl)
set(FSPEC ${CMAKE_CURRENT_BINARY_DIR}/genfspec.pl CACHE STRING "Path to fspec")
configure_file(${Vaango_SOURCE_DIR}/tools/fspec.pl.in ${FSPEC})

#----------------------------------------------------------------------------------
# Find the MPI package to use
#----------------------------------------------------------------------------------
find_package(MPIVaango REQUIRED)
if (MPI_FOUND)
  include_directories(${MPI_INCLUDE_PATH})
  set(MPI_DIR "" CACHE PATH "Path to MPI")
  set(MPI_LIBRARY ${MPI_LIBRARIES})
  set(DEF_MPI_CONST_WORKS "#define MPICONST const")
  set(DEF_MPI_MAX_THREADS "#define MPI_MAX_THREADS 64")
  set(DEF_MPI3_ENABLED "#define UINTAH_ENABLE_MPI3 false")
else()
  message(STATUS "No mpi found")
  set(MPI_DIR "")
  set(MPI_LIBRARY "")
endif()


#----------------------------------------------------------------------------------
# Find the LibXML2 package to use
#----------------------------------------------------------------------------------
find_package(LibXml2 REQUIRED)
if (LIBXML2_FOUND)
  include_directories(${LIBXML2_INCLUDE_DIR})
  set(LIBXML2_DIR "" CACHE PATH "Path to MPI")
  set(XML2_INCLUDE ${LIBXML2_INCLUDE_DIR})
  set(XML2_LIBRARY ${LIBXML2_LIBRARIES})
else()
  message(FATAL_ERROR "No libxml2 found")
  set(XML2_INCLUDE "")
  set(XML2_LIBRARY "")
endif()

#-----------------------------------------------------------------------------
# Configure time cross-platform header file generation
#-----------------------------------------------------------------------------
# SCI_MALLOC on?
IF (CMAKE_BUILD_TYPE MATCHES DEBUG)
  set(DEF_MALLOC "")
  set(DEF_MALLOC_LINENUMBERS "")
else()
  set(DEF_MALLOC "#define DISABLE_SCI_MALLOC 1")
  set(DEF_MALLOC_LINENUMBERS "")
ENDIF(CMAKE_BUILD_TYPE MATCHES DEBUG)

# SCI Assertions
if (CMAKE_BUILD_TYPE STREQUAL "Release")
  set(THROW_LEVEL  0)
  set(ASSERTION_LEVEL  0)
else()
  set(THROW_LEVEL  0)
  set(ASSERTION_LEVEL  3)
endif()

# SCI Template definitions
set(TEMPLATE_TAG "")
set(TEMPLATE_BOX "<>")

#-----------------------------------------------------------------------------
# Threads library  (for populating sci_defs/threads_def.h)
#-----------------------------------------------------------------------------
set(CMAKE_THREAD_PREFER_PTHREAD true)
find_package(Threads REQUIRED)
if (${Threads_FOUND})
  set(DEF_THREAD "#define SCI_PTHREAD 1")
  set(THREAD_LIB_FLAG "${CMAKE_THREAD_LIBS_INIT}")
  set(THREAD_LIBRARY "${CMAKE_THREAD_LIBS_INIT}")
  if (CMAKE_USE_PTHREADS_INIT)
    set(THREADS_TYPE  "pthreads")
  elseif (CMAKE_USE_WIN32_THREADS_INIT)
    set(THREADS_TYPE  "win32")
  else()
    set(THREADS_TYPE  "unix")
  endif()
  message(STATUS "Threads library ${THREADS_TYPE} found with flag ${CMAKE_THREAD_LIBS_INIT}")
else()
  set(DEF_THREAD "#define SCI_NOTHREAD 1")
  set(THREAD_LIB_FLAG "")
  set(THREAD_LIBRARY "")
  message(STATUS "No threads library found.  Software may work incorrectly.")
endif()
set(THREAD_IMPL "Thread_${THREADS_TYPE}.cc")

#-----------------------------------------------------------------------------
# Check availability of semaphore.h
#-----------------------------------------------------------------------------
check_include_file(semaphore.h HAVE_SEMAPHORE_H)

#-----------------------------------------------------------------------------
# Check atomic builtins for threads support in gcc
#-----------------------------------------------------------------------------
include(CheckCXXSourceCompiles)

CHECK_CXX_SOURCE_COMPILES("
#ifdef _MSC_VER
#include <windows.h>
#endif
int main() {
#ifdef _MSC_VER
        volatile LONG val = 1;
        MemoryBarrier();
        InterlockedCompareExchange(&val, 0, 1);
        InterlockedIncrement(&val);
        InterlockedDecrement(&val);
#else
        volatile unsigned long val = 1;
        __sync_synchronize();
        __sync_val_compare_and_swap(&val, 1, 0);
        __sync_add_and_fetch(&val, 1);
        __sync_sub_and_fetch(&val, 1);
#endif
        return 0;
      }
" GCC_HAS_ATOMICS)

if( NOT GCC_HAS_ATOMICS )
  message(STATUS "Warning: GCC will be built thread-unsafe because atomic builtins are missing")
  set(REFCOUNT_IMPL "RefCounted_gcc.cc")
  set(ATOMIC_IMPL "AtomicCounter_gcc.cc")
else()
  set(REFCOUNT_IMPL "RefCounted.cc")
  set(ATOMIC_IMPL "AtomicCounter_default.cc")
endif()

# time implementation 
if (WIN32)
  set(TIME_IMPL "Time_win32.cc")
else()
  set(TIME_IMPL "Time_unix.cc")
endif()

#-----------------------------------------------------------------------------
# Find dl library (for dlopen())
#-----------------------------------------------------------------------------
find_package(DL)
if (${DL_FOUND})
  set(DL_LIBRARY "${DL_LIBRARIES}")
  message(STATUS "DL library found")
else()
  set(DL_LIBRARY "")
  message(STATUS "DL library not found")
endif()

#------------------------------------------------------------------------------
# Find the Eigen3 libraries 
#------------------------------------------------------------------------------
find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})
message(STATUS "Eigen3 include directory is ${EIGEN3_INCLUDE_DIR}")
if (USE_CLANG)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -isystem ${EIGEN3_INCLUDE_DIR}")
endif()

#------------------------------------------------------------------------------
# Find the HDF5 libraries 
#------------------------------------------------------------------------------
find_package(HDF5 REQUIRED COMPONENTS CXX)
if (HDF5_FOUND)
  include_directories(${HDF5_INCLUDE_DIRS})
  message(STATUS "HDF5 include directory is ${HDF5_INCLUDE_DIRS}")
  set(HDF5_LIBRARY ${HDF5_CXX_LIBRARIES})
else()
  message(STATUS "No HDF5 found")
  set(HDF5_LIBRARY "")
endif()

#-----------------------------------------------------------------------------
# Find PETSc library (for implicit linear solvers)
#-----------------------------------------------------------------------------
if (PETSC)
  find_package(PETSc REQUIRED)
  set(HAVE_PETSC "yes")
  set(DEF_PETSC "#define HAVE_PETSC 1")
  add_definitions(${PETSC_DEFINITIONS})
endif()

#-----------------------------------------------------------------------------
# Find HYPRE library (for implicit linear solvers)
#-----------------------------------------------------------------------------
if (HYPRE)
  find_package(HYPRE REQUIRED)
  set(HAVE_HYPRE "yes")
  set(DEF_HYPRE "#define HAVE_HYPRE 1")
  set(DEF_HYPRE_VERSION_MAJOR "#define HYPRE_VERSION_MAJOR ${HYPRE_VERSION_MAJOR}")
  set(DEF_HYPRE_VERSION_MINOR "#define HYPRE_VERSION_MINOR ${HYPRE_VERSION_MINOR}")
  set(DEF_HYPRE_VERSION_PATCH "#define HYPRE_VERSION_PATCH ${HYPRE_VERSION_PATCH}")
endif()

#-----------------------------------------------------------------------------
# Find VisIt and build plugin
#-----------------------------------------------------------------------------
if (VISIT)
  message(STATUS "Checking for VisIt in ${VISIT_DIR}")
  set(VISIT_SOURCE_DIR "${VISIT_DIR}")
  message(STATUS "VISIT_SOURCE_DIR =  ${VISIT_SOURCE_DIR}")
  set(UINTAH_UDA_TO_VIS_LIB "${Vaango_BINARY_DIR}/lib/libStandAlone_tools_uda2vis.so")
  message(STATUS "-- Setting UDA_TO_VISIT_LIB_PATH = ${UINTAH_UDA_TO_VIS_LIB}")
  configure_file(${Vaango_SOURCE_DIR}/VisIt/udaReaderMTMD/avtudaReaderMTMDFileFormat.C.in ${Vaango_BINARY_DIR}/VisIt/udaReaderMTMD/avtudaReaderMTMDFileFormat.C)
  message(STATUS "-- Configuring avtudaReaderMTMDFileFormat.C")
  add_subdirectory(VisIt)
endif()

#-----------------------------------------------------------------------------
# Check included header files and create configuration files (for populating sci_defs/config_defs.h)
#-----------------------------------------------------------------------------
include(CheckIncludeFiles)
#check_include_files("ext/algorithm" HAVE_EXT_ALGORITHM)
CHECK_CXX_SOURCE_COMPILES("
#include <ext/algorithm>
#include <vector>
int main() {
        std::vector<int> vec;
        return 0;
      }
" HAVE_EXT_ALGORITHM)
if (HAVE_EXT_ALGORITHM)
  message(STATUS "ext/algorithm found.")
endif()
check_include_files(inttypes.h HAVE_INTTYPES_H)
check_include_files(limits.h HAVE_LIMITS_H)
check_include_files(memory.h HAVE_MEMORY_H)
check_include_files(stdint.h HAVE_STDINT_H)
check_include_files(stdlib.h HAVE_STDLIB_H)
check_include_files(strings.h HAVE_STRINGS_H)
check_include_files(string.h HAVE_STRING_H)
check_include_files("sys/select.h" HAVE_SYS_SELECT_H)
check_include_files("sys/stat.h" HAVE_SYS_STAT_H)
check_include_files("sys/time.h" HAVE_SYS_TIME_H)
check_include_files("sys/types.h" HAVE_SYS_TYPES_H)
check_include_files(unistd.h HAVE_UNISTD_H)
if (${HAVE_STDLIB_H})
  set(STDC_HEADERS 1)
endif()
message(STATUS "STDC_HEADERS ${STDC_HEADERS}")

#-----------------------------------------------------------------------------
# Check for location of hash_map for hashmap_defs.h
#-----------------------------------------------------------------------------
message(STATUS "Looking for hash_map")
set(HAVE_HASHMAP "None")

CHECK_CXX_SOURCE_COMPILES("
#include <unordered_map>
int main() { std::unordered_map<int, int> xx; return 0; }
" DEF_HASHMAP)
if(DEF_HASHMAP)
  message(STATUS "C11 hash_map found")
  set(HAVE_HASHMAP "HAVE_C11_HASHMAP")
  add_definitions(-DHAVE_C11_HASHMAP)
endif()

if (HAVE_HASHMAP STREQUAL "None")
  CHECK_CXX_SOURCE_COMPILES("
  #include <tr1/unordered_map>
  int main() { std::tr1::unordered_map<int, int> xx; return 0; }
  " DEF_HASHMAP)
  if(DEF_HASHMAP)
    message(STATUS "tr1/unordered_map compiles")
    set(HAVE_HASHMAP "HAVE_TR1_HASHMAP")
    add_definitions(-DHAVE_TR1_HASHMAP)
  endif()
endif()

## WARNING - the hashmap checks below don't work yet. BB
if (HAVE_HASHMAP STREQUAL "None")
  CHECK_CXX_SOURCE_COMPILES("
  #include <ext/hash_map>
  int main() { __gnu_cxx::hash_map<int, int> xx; return 0; }
  " DEF_HASHMAP)
  if(DEF_HASHMAP)
    message(STATUS "__gnu_cxx ext/hash_map found")
    set(HAVE_HASHMAP "HAVE_GNU_HASHMAP")
    add_definitions(-DHAVE_GNU_HASHMAP)
  endif()
endif()

if (HAVE_HASHMAP STREQUAL "None")
  message(STATUS "Standard hash_map not found. Trying ext/hash_map.")
  CHECK_CXX_SOURCE_COMPILES("
  #include <ext/hash_map>
  int main() { std::hash_map<int, int> xx; return 0; }
  " DEF_HASHMAP)
  if(DEF_HASHMAP)
    message(STATUS "ext/hash_map found")
    set(HAVE_HASHMAP "HAVE_EXT_HASHMAP")
    add_definitions(-DHAVE_EXT_HASHMAP)
  else()
    message(STATUS "ext/hash_map not found. Trying stdext/hash_map.")
    CHECK_CXX_SOURCE_COMPILES("
    #include <hash_map>
    int main() { stdext::hash_map<int, int> xx; return 0; }
    " DEF_HASHMAP)
    if(DEF_HASHMAP)
      message(STATUS "stdext/hash_map found")
      set(HAVE_HASHMAP "HAVE_STDEXT_HASHMAP")
      add_definitions(-DHAVE_STDEXT_HASHMAP)
    else()
      message(STATUS "stdext/hash_map not found. Trying tr1/unordered_map.")
    endif()
  endif()
endif()

if (DEF_HASHMAP)
  set(DEF_HASHMAP "#define ${HAVE_HASHMAP} 1")
else()
  message(STATUS "hash_map not found, will use map instead.")
  set(DEF_HASHMAP "")
endif()

#-----------------------------------------------------------------------
# Check for required standard C/C++ headers
#-----------------------------------------------------------------------
check_include_files(unistd.h HAVE_UNISTD_H)
check_include_files(dirent.h HAVE_DIRENT_H)
check_include_files(sys/time.h HAVE_SYS_TIME_H)
check_include_files(sys/param.h HAVE_SYS_PARAM_H)
check_include_files(values.h HAVE_VALUES_H)
check_include_files(malloc.h HAVE_MALLOC_H)
check_include_files(netdb.h HAVE_NETDB_H)
check_include_files(sys/select.h HAVE_SYS_SELECT_H)
check_include_files(sys/socket.h HAVE_SYS_SOCKET_H)
check_include_files(sys/mman.h HAVE_SYS_MMAN_H)
check_include_files(sys/ioctl.h HAVE_SYS_IOCTL_H)
check_include_files(sys/resource.h HAVE_SYS_RESOURCE_H)
check_include_files(sys/wait.h HAVE_SYS_WAIT_H)
check_include_files(sys/utsname.h HAVE_SYS_UTSNAME_H)
check_include_files(rpc/types.h HAVE_RPC_TYPES_H)
check_include_files(netinet/in.h HAVE_NETINET_IN_H)

#-----------------------------------------------------------------------
# Check for C++ standard template library headers
#-----------------------------------------------------------------------
CHECK_CXX_SOURCE_COMPILES("
#include <algorithm>
#include <vector>
#include <map>
#include <iostream>
#include <string>
int main() {
        std::vector<int> vec;
        return 0;
      }
" HAVE_STL_HEADERS)
if (HAVE_STL_HEADERS)
  message(STATUS "Standard template library headers found.")
endif()

#-----------------------------------------------------------------------
# Create the cross-platform header files
#-----------------------------------------------------------------------
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/git_info.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/git_info.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/config_cmakedefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/config_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/audio_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/audio_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/babel_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/babel_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/bits_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/bits_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/blas_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/blas_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/boost_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/boost_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/chromium_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/chromium_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/collab_vis_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/collab_vis_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/compile_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/compile_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/crypto_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/crypto_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/cuda_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/cuda_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/dataflow_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/dataflow_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/dynamic_cast_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/dynamic_cast_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/environment_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/environment_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/error_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/error_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/exe_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/exe_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/framework_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/framework_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/globus_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/globus_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/gperftools_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/gperftools_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/hashmap_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/hashmap_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/hdf5_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/hdf5_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/hypre_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/hypre_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/ieeefp_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/ieeefp_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/image_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/image_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/kepler_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/kepler_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/kokkos_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/kokkos_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/lapack_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/lapack_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/loki_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/loki_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/malloc_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/malloc_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/mdsplus_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/mdsplus_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/mpi_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/mpi_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/osx_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/osx_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/papi_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/papi_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/petsc_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/petsc_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/pidx_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/pidx_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/ptolemy_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/ptolemy_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/ruby_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/ruby_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/scisock_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/scisock_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/ssl_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/ssl_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/stat64_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/stat64_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/template_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/template_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/tena_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/tena_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/tena_testdefs.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/tena_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/thread_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/thread_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/uintah_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/uintah_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/vdt_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/vdt_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/vtk_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/vtk_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/visit_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/visit_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/wx_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/wx_defs.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/sci_defs/z_testdefs.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/sci_defs/z_defs.h)

#-----------------------------------------------------------------------------
# For reading JSON input files
#-----------------------------------------------------------------------------
#set(JSON_INCLUDES ${Vaango_SOURCE_DIR}/submodules/json/src)
#include_directories(${JSON_INCLUDES})

#-----------------------------------------------------------------------------
# Packages to enable (must enable packages when building core for now)
set(LOAD_PACKAGE "Vaango" CACHE STRING "Building Vaango package by default.")
set(HANDLED_PACKAGE_Vaango "YES")

include_directories(
  ${PETSC_INCLUDES}
  ${HYPRE_INCLUDE}
  ${XML2_INCLUDE}
)

include_directories(
  ${Vaango_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
)

#-------------------------------------------------------------------------
# Set up other custom configurations
# BB: TODO* Clean up the mess above and move into setup_* scripts
#-------------------------------------------------------------------------
#include(${CMAKE_SOURCE_DIR}/cmake/setup_custom_targets.cmake)

#=========================================================================
# For compliation, installation, and regression testing
#=========================================================================
MESSAGE(STATUS "")
MESSAGE(STATUS "Configuring done. Adding subdirectories.")

#------------------------------------------------------------------------
# Add main sources
#------------------------------------------------------------------------
add_subdirectory(Core)
add_subdirectory(CCA)
add_subdirectory(StandAlone)

#----------------------------------------------------------------------------------
# Regression testing
#----------------------------------------------------------------------------------
if (EXISTS ${CMAKE_SOURCE_DIR}/R_Tester/CMakeLists.txt)
  set(HAVE_REGRESSION_TESTS TRUE)
endif()
if (HAVE_REGRESSION_TESTS)
  add_subdirectory(R_Tester)
endif()

#----------------------------------------------------------------------------------
# Unit testing (CTest)
#----------------------------------------------------------------------------------
#enable_testing()
#add_test(NAME create_gold_standards 
#  COMMAND ${CMAKE_COMMAND} 
#   -D Vaango_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}
#   -D Vaango_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}
#   -P ${Vaango_SOURCE_DIR}/cmake/Macros/goldstandards.cmake)
#set_tests_properties(create_gold_standards PROPERTIES ENVIRONMENT
#  "PYTHONPATH=${Vaango_SOURCE_DIR}/R_Tester/toplevel;${Vaango_SOURCE_DIR}/R_Tester")

#----------------------------------------------------------------------------------
# Unit testing (googletests)
#----------------------------------------------------------------------------------
if (USE_CLANG)
  set(CMAKE_CXX_COMPILER "/usr/local/bin/clang++")
  set(CMAKE_CXX_FLAGS "-std=c++11")
endif ()

#include(FetchContent)
#FetchContent_Declare(
#  googletest
#  GIT_REPOSITORY https://github.com/google/googletest.git
#  GIT_TAG release-1.12.1
#)

# For Windows: Prevent overriding the parent project's compiler/linker settings
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
#FetchContent_MakeAvailable(googletest)

add_subdirectory(submodules)

